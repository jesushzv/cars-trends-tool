# Continuous Integration and Deployment Workflow
# Phase 19: CI/CD Pipeline
#
# Runs on push to main or develop branches
# Builds, tests, and publishes Docker images to GHCR

name: CI/CD

on:
  push:
    branches: [main, develop, staging, prod]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'

env:
  PYTHON_VERSION: '3.13'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write  # Required for uploading code scanning results (Trivy SARIF)

jobs:
  # Job 1: Run all tests
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          # All test dependencies are in requirements.txt
      
      - name: Verify dependency compatibility
        run: |
          cd backend
          python -m pip check
          echo "✅ No dependency conflicts detected"
          python -c "import pytest; print(f'pytest: {pytest.__version__}')"
          python -c "import pytest_asyncio; print(f'pytest-asyncio: {pytest_asyncio.__version__}')"
          python -c "import pytest_cov; print(f'pytest-cov: {pytest_cov.__version__}')"
      
      - name: Install Playwright
        run: |
          cd backend
          playwright install chromium
          playwright install-deps chromium
      
      - name: Run tests
        env:
          USE_SQLITE_FALLBACK: true
        run: |
          cd backend
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./backend/coverage.xml
          flags: backend
          fail_ci_if_error: false  # Don't fail if Codecov is unavailable
        if: always()
        continue-on-error: true  # Make this step optional

  # Job 2: Build and Push Docker Images
  build-and-push:
    name: 🐳 Build & Push Images
    runs-on: ubuntu-latest
    needs: test
    
    # Job-level permissions (required for pushing to GHCR)
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Select build context and Dockerfile
        id: cfg
        run: |
          if [ "${{ matrix.service }}" = "backend" ]; then
            echo "context=." >> $GITHUB_OUTPUT
            echo "file=backend/Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "context=./frontend" >> $GITHUB_OUTPUT
            echo "file=./frontend/Dockerfile" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.cfg.outputs.context }}
          file: ${{ steps.cfg.outputs.file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job 3: Security Scan Published Images
  scan-images:
    name: 🔒 Scan Images
    runs-on: ubuntu-latest
    needs: build-and-push
    
    # Job-level permissions (required for uploading SARIF to Code Scanning)
    permissions:
      contents: read
      packages: write
      security-events: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          github_token: ${{ github.token }}
        # Always upload results, but skip for forked PRs (token restrictions)
        if: ${{ always() && github.event.pull_request == null }}

  # Job 4: Create GitHub Release (main branch only)
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [build-and-push, scan-images]
    if: github.ref == 'refs/heads/main'
    
    # Job-level permissions (required for creating releases)
    permissions:
      contents: write
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: version
        run: |
          # Extract version from latest tag or use date
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v$(date +%Y.%m.%d)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}-${{ github.sha }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Release ${{ steps.version.outputs.version }}
            
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
            
            ### Docker Images
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
            ```
            
            ### Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # Job 5: Deployment Ready Notification
  deployment-ready:
    name: 📢 Deployment Ready
    runs-on: ubuntu-latest
    needs: [build-and-push, scan-images]
    
    steps:
      - name: Deployment summary
        run: |
          echo "## 🎉 Deployment Ready!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images Published:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Deploy:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull latest images" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or use docker-compose" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose pull" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

